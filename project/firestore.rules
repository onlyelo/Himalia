rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Utility functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
        request.auth.token.email == 'lukemury@gmail.com' ||
        request.auth.token.email == 'yelo@himalia.com'
      );
    }

    function isLinkedMember() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.linkedMemberId != null;
    }

    // Rules for users collection
    match /users/{userId} {
      allow read: if true;
      allow write: if isAdmin() || request.auth.uid == userId;
      
      // Allow updating lastLogin
      allow update: if request.auth.uid == userId 
        && request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['lastLogin']);
    }

    // Rules for members collection
    match /members/{memberId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Rules for ships collection
    match /ships/{shipId} {
      allow read: if true;
      allow write: if isLinkedMember() || isAdmin();
    }

    // Rules for articles collection
    match /articles/{articleId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Rules for events collection
    match /events/{eventId} {
      allow read: if true;
      allow create, update: if isAdmin();
      allow delete: if isAdmin() || 
        (isAuthenticated() && resource.data.createdBy == request.auth.uid);
    }

    // Rules for tools collection
    match /tools/{toolId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Rules for visuals collection
    match /visuals/{visualId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}